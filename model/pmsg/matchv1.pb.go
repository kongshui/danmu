// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/matchv1.proto

package pmsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 时间超过两分钟未匹配成功，则重新开始匹配
// 发送匹配信息
type MatchBattleV1ApplyMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenId        string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`            // 用户ID
	RoomId        string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`            // 房间ID
	IsAnonymous   bool                   `protobuf:"varint,3,opt,name=IsAnonymous,proto3" json:"IsAnonymous,omitempty"` // 是否匿名
	MatchNum      string                 `protobuf:"bytes,4,opt,name=MatchNum,proto3" json:"MatchNum,omitempty"`        // 匹配码
	TimeStamp     int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`     // 创建时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchBattleV1ApplyMessage) Reset() {
	*x = MatchBattleV1ApplyMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1ApplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1ApplyMessage) ProtoMessage() {}

func (x *MatchBattleV1ApplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1ApplyMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1ApplyMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{0}
}

func (x *MatchBattleV1ApplyMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1ApplyMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1ApplyMessage) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *MatchBattleV1ApplyMessage) GetMatchNum() string {
	if x != nil {
		return x.MatchNum
	}
	return ""
}

func (x *MatchBattleV1ApplyMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 成功匹配返回信息
type MatchBattleV1ApplyAckMessage struct {
	state             protoimpl.MessageState                  `protogen:"open.v1"`
	OpenIdList        []string                                `protobuf:"bytes,1,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	MatchBattleRoomId string                                  `protobuf:"bytes,2,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	UsersInfo         []*MatchBattleV1ApplyAckMessageUserInfo `protobuf:"bytes,3,rep,name=usersInfo,proto3" json:"usersInfo,omitempty"`
	IsMatch           bool                                    `protobuf:"varint,4,opt,name=IsMatch,proto3" json:"IsMatch,omitempty"`     // 是否匹配成功
	TimeStamp         int64                                   `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"` // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1ApplyAckMessage) Reset() {
	*x = MatchBattleV1ApplyAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1ApplyAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1ApplyAckMessage) ProtoMessage() {}

func (x *MatchBattleV1ApplyAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1ApplyAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1ApplyAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{1}
}

func (x *MatchBattleV1ApplyAckMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1ApplyAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1ApplyAckMessage) GetUsersInfo() []*MatchBattleV1ApplyAckMessageUserInfo {
	if x != nil {
		return x.UsersInfo
	}
	return nil
}

func (x *MatchBattleV1ApplyAckMessage) GetIsMatch() bool {
	if x != nil {
		return x.IsMatch
	}
	return false
}

func (x *MatchBattleV1ApplyAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 成功匹配发送场景就绪信息
type MatchBattleV1ReadyMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,4,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	TimeStamp         int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1ReadyMessage) Reset() {
	*x = MatchBattleV1ReadyMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1ReadyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1ReadyMessage) ProtoMessage() {}

func (x *MatchBattleV1ReadyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1ReadyMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1ReadyMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{2}
}

func (x *MatchBattleV1ReadyMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1ReadyMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1ReadyMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1ReadyMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1ReadyMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 客户端收到场景就绪信息后，如果自己就绪，发送完全就绪信息，收到的是对方的就绪信息
type MatchBattleV1ReadyAckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,4,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	TimeStamp         int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1ReadyAckMessage) Reset() {
	*x = MatchBattleV1ReadyAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1ReadyAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1ReadyAckMessage) ProtoMessage() {}

func (x *MatchBattleV1ReadyAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1ReadyAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1ReadyAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{3}
}

func (x *MatchBattleV1ReadyAckMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1ReadyAckMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1ReadyAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1ReadyAckMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1ReadyAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 服务端收到匹配就绪信息ack后，发送开始时间
type MatchBattleV1TimeCheckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchBattleRoomId string                 `protobuf:"bytes,1,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	CheckTimeStamp    int64                  `protobuf:"varint,2,opt,name=CheckTimeStamp,proto3" json:"CheckTimeStamp,omitempty"`      // 检验时间
	TimeStamp         int64                  `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1TimeCheckMessage) Reset() {
	*x = MatchBattleV1TimeCheckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1TimeCheckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1TimeCheckMessage) ProtoMessage() {}

func (x *MatchBattleV1TimeCheckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1TimeCheckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1TimeCheckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{4}
}

func (x *MatchBattleV1TimeCheckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1TimeCheckMessage) GetCheckTimeStamp() int64 {
	if x != nil {
		return x.CheckTimeStamp
	}
	return 0
}

func (x *MatchBattleV1TimeCheckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 客户端收到开始时间后，发送开始返回信息，确认开始时间正确,服务端将消息转发至对方客户端
type MatchBattleV1TimeCheckAckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	CheckTimeStamp    int64                  `protobuf:"varint,3,opt,name=CheckTimeStamp,proto3" json:"CheckTimeStamp,omitempty"`      // 检验时间
	DifferenceTime    int64                  `protobuf:"varint,4,opt,name=DifferenceTime,proto3" json:"DifferenceTime,omitempty"`      //差值时间，以时间最大的为基准，慢的时间在发送TimeStamp时要进行调整
	MatchBattleRoomId string                 `protobuf:"bytes,5,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,6,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	TimeStamp         int64                  `protobuf:"varint,7,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1TimeCheckAckMessage) Reset() {
	*x = MatchBattleV1TimeCheckAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1TimeCheckAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1TimeCheckAckMessage) ProtoMessage() {}

func (x *MatchBattleV1TimeCheckAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1TimeCheckAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1TimeCheckAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{5}
}

func (x *MatchBattleV1TimeCheckAckMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1TimeCheckAckMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1TimeCheckAckMessage) GetCheckTimeStamp() int64 {
	if x != nil {
		return x.CheckTimeStamp
	}
	return 0
}

func (x *MatchBattleV1TimeCheckAckMessage) GetDifferenceTime() int64 {
	if x != nil {
		return x.DifferenceTime
	}
	return 0
}

func (x *MatchBattleV1TimeCheckAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1TimeCheckAckMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1TimeCheckAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 客户端收到对方的开始确认时间后，发送确认时间信息至服务器
type MatchBattleV1StartConfirmMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,4,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	TimeStamp         int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1StartConfirmMessage) Reset() {
	*x = MatchBattleV1StartConfirmMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1StartConfirmMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1StartConfirmMessage) ProtoMessage() {}

func (x *MatchBattleV1StartConfirmMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1StartConfirmMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1StartConfirmMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{6}
}

func (x *MatchBattleV1StartConfirmMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1StartConfirmMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1StartConfirmMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1StartConfirmMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1StartConfirmMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 服务器收到确认信息返回
type MatchBattleV1StartConfirmAckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,4,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	TimeStamp         int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1StartConfirmAckMessage) Reset() {
	*x = MatchBattleV1StartConfirmAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1StartConfirmAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1StartConfirmAckMessage) ProtoMessage() {}

func (x *MatchBattleV1StartConfirmAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1StartConfirmAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1StartConfirmAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{7}
}

func (x *MatchBattleV1StartConfirmAckMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1StartConfirmAckMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1StartConfirmAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1StartConfirmAckMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1StartConfirmAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 服务器收到确认信息后，发送roundid信息
type MatchBattleV1SendRoundIdMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchBattleRoomId string                 `protobuf:"bytes,1,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	RoundId           int64                  `protobuf:"varint,2,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                    // 回合ID,使用微秒级时间戳
	TimeStamp         int64                  `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1SendRoundIdMessage) Reset() {
	*x = MatchBattleV1SendRoundIdMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1SendRoundIdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1SendRoundIdMessage) ProtoMessage() {}

func (x *MatchBattleV1SendRoundIdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1SendRoundIdMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1SendRoundIdMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{8}
}

func (x *MatchBattleV1SendRoundIdMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1SendRoundIdMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *MatchBattleV1SendRoundIdMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 客户端收到roundid信息后，返送返回消息
type MatchBattleV1SendRoundIdAckMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenId        string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`        // 用户ID
	RoundId       int64                  `protobuf:"varint,2,opt,name=RoundId,proto3" json:"RoundId,omitempty"`     // 回合ID,使用微秒级时间戳
	TimeStamp     int64                  `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"` // 创建时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchBattleV1SendRoundIdAckMessage) Reset() {
	*x = MatchBattleV1SendRoundIdAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1SendRoundIdAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1SendRoundIdAckMessage) ProtoMessage() {}

func (x *MatchBattleV1SendRoundIdAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1SendRoundIdAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1SendRoundIdAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{9}
}

func (x *MatchBattleV1SendRoundIdAckMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1SendRoundIdAckMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *MatchBattleV1SendRoundIdAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 如果开始后没有收到roundId信息，客户端重新请求Rond信息
type MatchBattleV1AskRoundIdMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchBattleRoomId string                 `protobuf:"bytes,1,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenId            string                 `protobuf:"bytes,2,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	TimeStamp         int64                  `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1AskRoundIdMessage) Reset() {
	*x = MatchBattleV1AskRoundIdMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1AskRoundIdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1AskRoundIdMessage) ProtoMessage() {}

func (x *MatchBattleV1AskRoundIdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1AskRoundIdMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1AskRoundIdMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{10}
}

func (x *MatchBattleV1AskRoundIdMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1AskRoundIdMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1AskRoundIdMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type MatchBattleV1AskRoundIdAckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchBattleRoomId string                 `protobuf:"bytes,1,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	RoundId           int64                  `protobuf:"varint,2,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                    // 回合ID,使用微秒级时间戳
	TimeStamp         int64                  `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1AskRoundIdAckMessage) Reset() {
	*x = MatchBattleV1AskRoundIdAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1AskRoundIdAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1AskRoundIdAckMessage) ProtoMessage() {}

func (x *MatchBattleV1AskRoundIdAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1AskRoundIdAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1AskRoundIdAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{11}
}

func (x *MatchBattleV1AskRoundIdAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1AskRoundIdAckMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *MatchBattleV1AskRoundIdAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 客户端发送start消息给服务器端，切换场景前一秒或者切换场景后立刻发
type MatchBattleV1StartMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,4,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	RoundId           int64                  `protobuf:"varint,5,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                    //roundId
	TimeStamp         int64                  `protobuf:"varint,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1StartMessage) Reset() {
	*x = MatchBattleV1StartMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1StartMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1StartMessage) ProtoMessage() {}

func (x *MatchBattleV1StartMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1StartMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1StartMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{12}
}

func (x *MatchBattleV1StartMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1StartMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1StartMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1StartMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1StartMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *MatchBattleV1StartMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 双发发送各自数据给对方，用于同步数据,服务端进行转发，openId和roomId是对方的
// 如果是掉线，未掉线客户端收到信息后，发送现在状态给对方，掉线方收到后，发送确认信息，确认已经收到，同时自己再10s或者5s内不发同步消息
type MatchBattleV1SyncMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,4,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	Data              []byte                 `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`                           // 数据
	RoundId           int64                  `protobuf:"varint,6,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                    //roundId
	SyncId            int64                  `protobuf:"varint,7,opt,name=SyncId,proto3" json:"SyncId,omitempty"`                      // 没发送一次递增1，未收到回包后处理
	SyncIdAck         int64                  `protobuf:"varint,8,opt,name=SyncIdAck,proto3" json:"SyncIdAck,omitempty"`                //收到的最近一次的同步消息
	TimeStamp         int64                  `protobuf:"varint,9,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1SyncMessage) Reset() {
	*x = MatchBattleV1SyncMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1SyncMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1SyncMessage) ProtoMessage() {}

func (x *MatchBattleV1SyncMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1SyncMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1SyncMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{13}
}

func (x *MatchBattleV1SyncMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1SyncMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1SyncMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1SyncMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1SyncMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MatchBattleV1SyncMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *MatchBattleV1SyncMessage) GetSyncId() int64 {
	if x != nil {
		return x.SyncId
	}
	return 0
}

func (x *MatchBattleV1SyncMessage) GetSyncIdAck() int64 {
	if x != nil {
		return x.SyncIdAck
	}
	return 0
}

func (x *MatchBattleV1SyncMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 客户端收到信息后，发送确认信息，确认已经收到
// 如果是掉线方，收到后自己在10s或者5s内不发同步消息
type MatchBattleV1SyncAckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	RoundId           int64                  `protobuf:"varint,4,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                    //roundId
	SyncId            int64                  `protobuf:"varint,5,opt,name=SyncId,proto3" json:"SyncId,omitempty"`                      // 收到的syncId回包
	TimeStamp         int64                  `protobuf:"varint,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1SyncAckMessage) Reset() {
	*x = MatchBattleV1SyncAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1SyncAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1SyncAckMessage) ProtoMessage() {}

func (x *MatchBattleV1SyncAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1SyncAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1SyncAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{14}
}

func (x *MatchBattleV1SyncAckMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1SyncAckMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1SyncAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1SyncAckMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *MatchBattleV1SyncAckMessage) GetSyncId() int64 {
	if x != nil {
		return x.SyncId
	}
	return 0
}

func (x *MatchBattleV1SyncAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 游戏结束后，发送结束信息，服务端转发给对方
type MatchBattleV1EndMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,4,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	RoundId           int64                  `protobuf:"varint,5,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                    //roundId
	TimeStamp         int64                  `protobuf:"varint,6,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1EndMessage) Reset() {
	*x = MatchBattleV1EndMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1EndMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1EndMessage) ProtoMessage() {}

func (x *MatchBattleV1EndMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1EndMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1EndMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{15}
}

func (x *MatchBattleV1EndMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1EndMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1EndMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1EndMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1EndMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *MatchBattleV1EndMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 取消匹配
type MatchBattleV1CancelMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenId        string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`        // 用户ID
	RoomId        string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`        // 房间ID
	MatchNum      string                 `protobuf:"bytes,3,opt,name=MatchNum,proto3" json:"MatchNum,omitempty"`    // 匹配码
	TimeStamp     int64                  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"` // 创建时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchBattleV1CancelMessage) Reset() {
	*x = MatchBattleV1CancelMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1CancelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1CancelMessage) ProtoMessage() {}

func (x *MatchBattleV1CancelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1CancelMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1CancelMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{16}
}

func (x *MatchBattleV1CancelMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1CancelMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1CancelMessage) GetMatchNum() string {
	if x != nil {
		return x.MatchNum
	}
	return ""
}

func (x *MatchBattleV1CancelMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 客户端收到取消匹配信息后，发送取消匹配确认信息
type MatchBattleV1CancelAckMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenId        string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`        // 用户ID
	RoomId        string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`        // 房间ID
	Error         string                 `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`          //错误信息
	IsSuccess     bool                   `protobuf:"varint,4,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"` // 是否取消成功
	TimeStamp     int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"` // 创建时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchBattleV1CancelAckMessage) Reset() {
	*x = MatchBattleV1CancelAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1CancelAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1CancelAckMessage) ProtoMessage() {}

func (x *MatchBattleV1CancelAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1CancelAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1CancelAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{17}
}

func (x *MatchBattleV1CancelAckMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1CancelAckMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1CancelAckMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *MatchBattleV1CancelAckMessage) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *MatchBattleV1CancelAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 断线重连规则........................
// 查询客户端是否是断线重连，如果是，服务端向客户端发送以下，断线是掉线即为关闭客户端
type MatchBattleV1ReconnectMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	TimeStamp         int64                  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1ReconnectMessage) Reset() {
	*x = MatchBattleV1ReconnectMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1ReconnectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1ReconnectMessage) ProtoMessage() {}

func (x *MatchBattleV1ReconnectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1ReconnectMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1ReconnectMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{18}
}

func (x *MatchBattleV1ReconnectMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1ReconnectMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1ReconnectMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1ReconnectMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 客户端收到信息后，确认是否是断线重连，还是重新开始，重新开始点击匹配按钮.点击重新链接发送以下按钮
type MatchBattleV1ReconnectAckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenIdList        []string               `protobuf:"bytes,1,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	MatchBattleRoomId string                 `protobuf:"bytes,2,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 匹配房间ID
	TimeStamp         int64                  `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1ReconnectAckMessage) Reset() {
	*x = MatchBattleV1ReconnectAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1ReconnectAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1ReconnectAckMessage) ProtoMessage() {}

func (x *MatchBattleV1ReconnectAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1ReconnectAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1ReconnectAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{19}
}

func (x *MatchBattleV1ReconnectAckMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1ReconnectAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1ReconnectAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 服务端收到后，向未掉线方服务器发送同步信息，下面信息是掉线放信息，然后开始发送MatchBattleV1ApplySyncMessage信息
type MatchBattleV1ReconnectSyncMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenId        string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`        // 用户ID
	RoomId        string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`        // 房间ID
	TimeStamp     int64                  `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"` // 创建时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchBattleV1ReconnectSyncMessage) Reset() {
	*x = MatchBattleV1ReconnectSyncMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1ReconnectSyncMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1ReconnectSyncMessage) ProtoMessage() {}

func (x *MatchBattleV1ReconnectSyncMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1ReconnectSyncMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1ReconnectSyncMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{20}
}

func (x *MatchBattleV1ReconnectSyncMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1ReconnectSyncMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleV1ReconnectSyncMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 匹配报错
type MatchBattleErrorMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 用户ID
	RoomId            string                 `protobuf:"bytes,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 房间ID
	MatchBattleRoomId string                 `protobuf:"bytes,3,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	TimeStamp         int64                  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	ErrorCode         int32                  `protobuf:"varint,5,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`                // 错误码
	ErrorMsg          string                 `protobuf:"bytes,6,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`                   // 错误信息
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleErrorMessage) Reset() {
	*x = MatchBattleErrorMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleErrorMessage) ProtoMessage() {}

func (x *MatchBattleErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleErrorMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleErrorMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{21}
}

func (x *MatchBattleErrorMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleErrorMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleErrorMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleErrorMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *MatchBattleErrorMessage) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *MatchBattleErrorMessage) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// 上传最终结果，只有获胜方上传
type MatchBattleV1Upload struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchBattleRoomId string                 `protobuf:"bytes,1,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	GroupResultList   []*GroupResult         `protobuf:"bytes,2,rep,name=GroupResultList,proto3" json:"GroupResultList,omitempty"`     //分组输赢结果，避免GroupUserList中输赢组区分错误
	GroupUserList     []*GroupUser           `protobuf:"bytes,3,rep,name=GroupUserList,proto3" json:"GroupUserList,omitempty"`         //用户角色信息，用于查看角色的
	OpenIdList        []string               `protobuf:"bytes,4,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	TimeStamp         int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1Upload) Reset() {
	*x = MatchBattleV1Upload{}
	mi := &file_proto_matchv1_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1Upload) ProtoMessage() {}

func (x *MatchBattleV1Upload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1Upload.ProtoReflect.Descriptor instead.
func (*MatchBattleV1Upload) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{22}
}

func (x *MatchBattleV1Upload) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1Upload) GetGroupResultList() []*GroupResult {
	if x != nil {
		return x.GroupResultList
	}
	return nil
}

func (x *MatchBattleV1Upload) GetGroupUserList() []*GroupUser {
	if x != nil {
		return x.GroupUserList
	}
	return nil
}

func (x *MatchBattleV1Upload) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1Upload) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 匹配组上传节点积分
type MatchBattleAddIntegralMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 主播OpenId
	MatchBattleRoomId string                 `protobuf:"bytes,2,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	Side              string                 `protobuf:"bytes,3,opt,name=Side,proto3" json:"Side,omitempty"`                           // 哪边传过来的。左边还是右边
	NodeId            int64                  `protobuf:"varint,4,opt,name=NodeId,proto3" json:"NodeId,omitempty"`                      // 节点id
	TimeStamp         int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleAddIntegralMessage) Reset() {
	*x = MatchBattleAddIntegralMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleAddIntegralMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleAddIntegralMessage) ProtoMessage() {}

func (x *MatchBattleAddIntegralMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleAddIntegralMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleAddIntegralMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{23}
}

func (x *MatchBattleAddIntegralMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleAddIntegralMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleAddIntegralMessage) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *MatchBattleAddIntegralMessage) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *MatchBattleAddIntegralMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 匹配使用连胜币
type MatchBattleUseWinnerStreamCoinMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 使用连胜币OpenId
	MatchBattleRoomId string                 `protobuf:"bytes,2,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,3,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	Comment           string                 `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`                     // 礼物Id
	UseSide           string                 `protobuf:"bytes,5,opt,name=UseSide,proto3" json:"UseSide,omitempty"`                     // 哪边使用
	RoomId            string                 `protobuf:"bytes,6,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       // 主播房间号
	TimeStamp         int64                  `protobuf:"varint,7,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleUseWinnerStreamCoinMessage) Reset() {
	*x = MatchBattleUseWinnerStreamCoinMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleUseWinnerStreamCoinMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleUseWinnerStreamCoinMessage) ProtoMessage() {}

func (x *MatchBattleUseWinnerStreamCoinMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleUseWinnerStreamCoinMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleUseWinnerStreamCoinMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{24}
}

func (x *MatchBattleUseWinnerStreamCoinMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleUseWinnerStreamCoinMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinMessage) GetUseSide() string {
	if x != nil {
		return x.UseSide
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 匹配使用连胜币返回
type MatchBattleUseWinnerStreamCoinAckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                        // 使用连胜币OpenId
	MatchBattleRoomId string                 `protobuf:"bytes,2,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"`  // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,3,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`                // 用户ID
	GiftId            string                 `protobuf:"bytes,4,opt,name=GiftId,proto3" json:"GiftId,omitempty"`                        // 评论内容
	UseSide           string                 `protobuf:"bytes,5,opt,name=UseSide,proto3" json:"UseSide,omitempty"`                      // 哪边使用
	WinningStreamCoin int64                  `protobuf:"varint,6,opt,name=WinningStreamCoin,proto3" json:"WinningStreamCoin,omitempty"` // 还剩下多少连胜币
	IsUse             bool                   `protobuf:"varint,7,opt,name=IsUse,proto3" json:"IsUse,omitempty"`                         //是否使用成功
	RoomId            string                 `protobuf:"bytes,8,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                        // 主播房间号
	TimeStamp         int64                  `protobuf:"varint,9,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                 // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) Reset() {
	*x = MatchBattleUseWinnerStreamCoinAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleUseWinnerStreamCoinAckMessage) ProtoMessage() {}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleUseWinnerStreamCoinAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleUseWinnerStreamCoinAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{25}
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) GetGiftId() string {
	if x != nil {
		return x.GiftId
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) GetUseSide() string {
	if x != nil {
		return x.UseSide
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) GetWinningStreamCoin() int64 {
	if x != nil {
		return x.WinningStreamCoin
	}
	return 0
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) GetIsUse() bool {
	if x != nil {
		return x.IsUse
	}
	return false
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MatchBattleUseWinnerStreamCoinAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 添加连胜币
type MatchBattleAddStreamCoinMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchBattleRoomId string                 `protobuf:"bytes,1,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	UserList          []*AddWinnerStreamCoin `protobuf:"bytes,2,rep,name=UserList,proto3" json:"UserList,omitempty"`                   // 添加连胜币集合
	Type              string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`                           // 瓜分连胜币还是胜利失败添加连胜币,divideup瓜分，normal普通获取
	TimeStamp         int64                  `protobuf:"varint,9,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleAddStreamCoinMessage) Reset() {
	*x = MatchBattleAddStreamCoinMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleAddStreamCoinMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleAddStreamCoinMessage) ProtoMessage() {}

func (x *MatchBattleAddStreamCoinMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleAddStreamCoinMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleAddStreamCoinMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{26}
}

func (x *MatchBattleAddStreamCoinMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleAddStreamCoinMessage) GetUserList() []*AddWinnerStreamCoin {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *MatchBattleAddStreamCoinMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MatchBattleAddStreamCoinMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// startGamed,正式开始游戏前确认
type MatchBattleStartGamedConfirmMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchBattleRoomId string                 `protobuf:"bytes,1,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,2,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	TimeStamp         int64                  `protobuf:"varint,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleStartGamedConfirmMessage) Reset() {
	*x = MatchBattleStartGamedConfirmMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleStartGamedConfirmMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleStartGamedConfirmMessage) ProtoMessage() {}

func (x *MatchBattleStartGamedConfirmMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleStartGamedConfirmMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleStartGamedConfirmMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{27}
}

func (x *MatchBattleStartGamedConfirmMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleStartGamedConfirmMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleStartGamedConfirmMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// startGamed,正式开始游戏前确认ack
type MatchBattleStartGamedConfirAckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 主播OpenId
	MatchBattleRoomId string                 `protobuf:"bytes,2,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,3,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	TimeStamp         int64                  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleStartGamedConfirAckMessage) Reset() {
	*x = MatchBattleStartGamedConfirAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleStartGamedConfirAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleStartGamedConfirAckMessage) ProtoMessage() {}

func (x *MatchBattleStartGamedConfirAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleStartGamedConfirAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleStartGamedConfirAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{28}
}

func (x *MatchBattleStartGamedConfirAckMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleStartGamedConfirAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleStartGamedConfirAckMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleStartGamedConfirAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// startgameAck
type MatchBattleV1StartAckMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchBattleRoomId string                 `protobuf:"bytes,1,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	OpenIdList        []string               `protobuf:"bytes,2,rep,name=OpenIdList,proto3" json:"OpenIdList,omitempty"`               // 用户ID
	RoundId           int64                  `protobuf:"varint,3,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                    //roundId
	TimeStamp         int64                  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleV1StartAckMessage) Reset() {
	*x = MatchBattleV1StartAckMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1StartAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1StartAckMessage) ProtoMessage() {}

func (x *MatchBattleV1StartAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1StartAckMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleV1StartAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{29}
}

func (x *MatchBattleV1StartAckMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleV1StartAckMessage) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *MatchBattleV1StartAckMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *MatchBattleV1StartAckMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

// 退出pk组
type MatchBattleQuitWithErrorMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                       // 主播OpenId
	MatchBattleRoomId string                 `protobuf:"bytes,2,opt,name=MatchBattleRoomId,proto3" json:"MatchBattleRoomId,omitempty"` // 战斗房间ID
	ErrorMsg          string                 `protobuf:"bytes,3,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`                   // 错误信息
	TimeStamp         int64                  `protobuf:"varint,4,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchBattleQuitWithErrorMessage) Reset() {
	*x = MatchBattleQuitWithErrorMessage{}
	mi := &file_proto_matchv1_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleQuitWithErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleQuitWithErrorMessage) ProtoMessage() {}

func (x *MatchBattleQuitWithErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleQuitWithErrorMessage.ProtoReflect.Descriptor instead.
func (*MatchBattleQuitWithErrorMessage) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{30}
}

func (x *MatchBattleQuitWithErrorMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleQuitWithErrorMessage) GetMatchBattleRoomId() string {
	if x != nil {
		return x.MatchBattleRoomId
	}
	return ""
}

func (x *MatchBattleQuitWithErrorMessage) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *MatchBattleQuitWithErrorMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type MatchBattleV1ApplyAckMessageUserInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenId        string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`            // 用户ID
	NickName      string                 `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`        // 用户名称
	AvatarUrl     string                 `protobuf:"bytes,3,opt,name=AvatarUrl,proto3" json:"AvatarUrl,omitempty"`      // 用户头像
	IsAnonymous   bool                   `protobuf:"varint,4,opt,name=IsAnonymous,proto3" json:"IsAnonymous,omitempty"` // 是否匿名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchBattleV1ApplyAckMessageUserInfo) Reset() {
	*x = MatchBattleV1ApplyAckMessageUserInfo{}
	mi := &file_proto_matchv1_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBattleV1ApplyAckMessageUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBattleV1ApplyAckMessageUserInfo) ProtoMessage() {}

func (x *MatchBattleV1ApplyAckMessageUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchv1_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBattleV1ApplyAckMessageUserInfo.ProtoReflect.Descriptor instead.
func (*MatchBattleV1ApplyAckMessageUserInfo) Descriptor() ([]byte, []int) {
	return file_proto_matchv1_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MatchBattleV1ApplyAckMessageUserInfo) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MatchBattleV1ApplyAckMessageUserInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *MatchBattleV1ApplyAckMessageUserInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *MatchBattleV1ApplyAckMessageUserInfo) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

var File_proto_matchv1_proto protoreflect.FileDescriptor

const file_proto_matchv1_proto_rawDesc = "" +
	"\n" +
	"\x13proto/matchv1.proto\x12\x04pmsg\x1a\x17proto/groupresult.proto\x1a\x15proto/groupuser.proto\x1a\x1fproto/addwinnerstreamcoin.proto\"\xa7\x01\n" +
	"\x19MatchBattleV1ApplyMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12 \n" +
	"\vIsAnonymous\x18\x03 \x01(\bR\vIsAnonymous\x12\x1a\n" +
	"\bMatchNum\x18\x04 \x01(\tR\bMatchNum\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\"\xef\x02\n" +
	"\x1cMatchBattleV1ApplyAckMessage\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x01 \x03(\tR\n" +
	"OpenIdList\x12,\n" +
	"\x11MatchBattleRoomId\x18\x02 \x01(\tR\x11MatchBattleRoomId\x12I\n" +
	"\tusersInfo\x18\x03 \x03(\v2+.pmsg.MatchBattleV1ApplyAckMessage.userInfoR\tusersInfo\x12\x18\n" +
	"\aIsMatch\x18\x04 \x01(\bR\aIsMatch\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\x1a~\n" +
	"\buserInfo\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x1a\n" +
	"\bNickName\x18\x02 \x01(\tR\bNickName\x12\x1c\n" +
	"\tAvatarUrl\x18\x03 \x01(\tR\tAvatarUrl\x12 \n" +
	"\vIsAnonymous\x18\x04 \x01(\bR\vIsAnonymous\"\xb7\x01\n" +
	"\x19MatchBattleV1ReadyMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x04 \x03(\tR\n" +
	"OpenIdList\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\"\xba\x01\n" +
	"\x1cMatchBattleV1ReadyAckMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x04 \x03(\tR\n" +
	"OpenIdList\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\"\x93\x01\n" +
	"\x1dMatchBattleV1TimeCheckMessage\x12,\n" +
	"\x11MatchBattleRoomId\x18\x01 \x01(\tR\x11MatchBattleRoomId\x12&\n" +
	"\x0eCheckTimeStamp\x18\x02 \x01(\x03R\x0eCheckTimeStamp\x12\x1c\n" +
	"\tTimeStamp\x18\x03 \x01(\x03R\tTimeStamp\"\x8e\x02\n" +
	" MatchBattleV1TimeCheckAckMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12&\n" +
	"\x0eCheckTimeStamp\x18\x03 \x01(\x03R\x0eCheckTimeStamp\x12&\n" +
	"\x0eDifferenceTime\x18\x04 \x01(\x03R\x0eDifferenceTime\x12,\n" +
	"\x11MatchBattleRoomId\x18\x05 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x06 \x03(\tR\n" +
	"OpenIdList\x12\x1c\n" +
	"\tTimeStamp\x18\a \x01(\x03R\tTimeStamp\"\xbe\x01\n" +
	" MatchBattleV1StartConfirmMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x04 \x03(\tR\n" +
	"OpenIdList\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\"\xc1\x01\n" +
	"#MatchBattleV1StartConfirmAckMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x04 \x03(\tR\n" +
	"OpenIdList\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\"\x87\x01\n" +
	"\x1fMatchBattleV1SendRoundIdMessage\x12,\n" +
	"\x11MatchBattleRoomId\x18\x01 \x01(\tR\x11MatchBattleRoomId\x12\x18\n" +
	"\aRoundId\x18\x02 \x01(\x03R\aRoundId\x12\x1c\n" +
	"\tTimeStamp\x18\x03 \x01(\x03R\tTimeStamp\"t\n" +
	"\"MatchBattleV1SendRoundIdAckMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x18\n" +
	"\aRoundId\x18\x02 \x01(\x03R\aRoundId\x12\x1c\n" +
	"\tTimeStamp\x18\x03 \x01(\x03R\tTimeStamp\"\x84\x01\n" +
	"\x1eMatchBattleV1AskRoundIdMessage\x12,\n" +
	"\x11MatchBattleRoomId\x18\x01 \x01(\tR\x11MatchBattleRoomId\x12\x16\n" +
	"\x06OpenId\x18\x02 \x01(\tR\x06OpenId\x12\x1c\n" +
	"\tTimeStamp\x18\x03 \x01(\x03R\tTimeStamp\"\x89\x01\n" +
	"!MatchBattleV1AskRoundIdAckMessage\x12,\n" +
	"\x11MatchBattleRoomId\x18\x01 \x01(\tR\x11MatchBattleRoomId\x12\x18\n" +
	"\aRoundId\x18\x02 \x01(\x03R\aRoundId\x12\x1c\n" +
	"\tTimeStamp\x18\x03 \x01(\x03R\tTimeStamp\"\xd1\x01\n" +
	"\x19MatchBattleV1StartMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x04 \x03(\tR\n" +
	"OpenIdList\x12\x18\n" +
	"\aRoundId\x18\x05 \x01(\x03R\aRoundId\x12\x1c\n" +
	"\tTimeStamp\x18\x06 \x01(\x03R\tTimeStamp\"\x9a\x02\n" +
	"\x18MatchBattleV1SyncMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x04 \x03(\tR\n" +
	"OpenIdList\x12\x12\n" +
	"\x04Data\x18\x05 \x01(\fR\x04Data\x12\x18\n" +
	"\aRoundId\x18\x06 \x01(\x03R\aRoundId\x12\x16\n" +
	"\x06SyncId\x18\a \x01(\x03R\x06SyncId\x12\x1c\n" +
	"\tSyncIdAck\x18\b \x01(\x03R\tSyncIdAck\x12\x1c\n" +
	"\tTimeStamp\x18\t \x01(\x03R\tTimeStamp\"\xcb\x01\n" +
	"\x1bMatchBattleV1SyncAckMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x18\n" +
	"\aRoundId\x18\x04 \x01(\x03R\aRoundId\x12\x16\n" +
	"\x06SyncId\x18\x05 \x01(\x03R\x06SyncId\x12\x1c\n" +
	"\tTimeStamp\x18\x06 \x01(\x03R\tTimeStamp\"\xcf\x01\n" +
	"\x17MatchBattleV1EndMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x04 \x03(\tR\n" +
	"OpenIdList\x12\x18\n" +
	"\aRoundId\x18\x05 \x01(\x03R\aRoundId\x12\x1c\n" +
	"\tTimeStamp\x18\x06 \x01(\x03R\tTimeStamp\"\x86\x01\n" +
	"\x1aMatchBattleV1CancelMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12\x1a\n" +
	"\bMatchNum\x18\x03 \x01(\tR\bMatchNum\x12\x1c\n" +
	"\tTimeStamp\x18\x04 \x01(\x03R\tTimeStamp\"\xa1\x01\n" +
	"\x1dMatchBattleV1CancelAckMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12\x14\n" +
	"\x05Error\x18\x03 \x01(\tR\x05Error\x12\x1c\n" +
	"\tIsSuccess\x18\x04 \x01(\bR\tIsSuccess\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\"\x9b\x01\n" +
	"\x1dMatchBattleV1ReconnectMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x1c\n" +
	"\tTimeStamp\x18\x04 \x01(\x03R\tTimeStamp\"\x8e\x01\n" +
	" MatchBattleV1ReconnectAckMessage\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x01 \x03(\tR\n" +
	"OpenIdList\x12,\n" +
	"\x11MatchBattleRoomId\x18\x02 \x01(\tR\x11MatchBattleRoomId\x12\x1c\n" +
	"\tTimeStamp\x18\x03 \x01(\x03R\tTimeStamp\"q\n" +
	"!MatchBattleV1ReconnectSyncMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12\x1c\n" +
	"\tTimeStamp\x18\x03 \x01(\x03R\tTimeStamp\"\xcf\x01\n" +
	"\x17MatchBattleErrorMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06RoomId\x18\x02 \x01(\tR\x06RoomId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x03 \x01(\tR\x11MatchBattleRoomId\x12\x1c\n" +
	"\tTimeStamp\x18\x04 \x01(\x03R\tTimeStamp\x12\x1c\n" +
	"\tErrorCode\x18\x05 \x01(\x05R\tErrorCode\x12\x1a\n" +
	"\bErrorMsg\x18\x06 \x01(\tR\bErrorMsg\"\xf5\x01\n" +
	"\x13MatchBattleV1Upload\x12,\n" +
	"\x11MatchBattleRoomId\x18\x01 \x01(\tR\x11MatchBattleRoomId\x12;\n" +
	"\x0fGroupResultList\x18\x02 \x03(\v2\x11.pmsg.GroupResultR\x0fGroupResultList\x125\n" +
	"\rGroupUserList\x18\x03 \x03(\v2\x0f.pmsg.GroupUserR\rGroupUserList\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x04 \x03(\tR\n" +
	"OpenIdList\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\"\xaf\x01\n" +
	"\x1dMatchBattleAddIntegralMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x02 \x01(\tR\x11MatchBattleRoomId\x12\x12\n" +
	"\x04Side\x18\x03 \x01(\tR\x04Side\x12\x16\n" +
	"\x06NodeId\x18\x04 \x01(\x03R\x06NodeId\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\"\xf7\x01\n" +
	"%MatchBattleUseWinnerStreamCoinMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x02 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x03 \x03(\tR\n" +
	"OpenIdList\x12\x18\n" +
	"\aComment\x18\x04 \x01(\tR\aComment\x12\x18\n" +
	"\aUseSide\x18\x05 \x01(\tR\aUseSide\x12\x16\n" +
	"\x06RoomId\x18\x06 \x01(\tR\x06RoomId\x12\x1c\n" +
	"\tTimeStamp\x18\a \x01(\x03R\tTimeStamp\"\xbc\x02\n" +
	"(MatchBattleUseWinnerStreamCoinAckMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x02 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x03 \x03(\tR\n" +
	"OpenIdList\x12\x16\n" +
	"\x06GiftId\x18\x04 \x01(\tR\x06GiftId\x12\x18\n" +
	"\aUseSide\x18\x05 \x01(\tR\aUseSide\x12,\n" +
	"\x11WinningStreamCoin\x18\x06 \x01(\x03R\x11WinningStreamCoin\x12\x14\n" +
	"\x05IsUse\x18\a \x01(\bR\x05IsUse\x12\x16\n" +
	"\x06RoomId\x18\b \x01(\tR\x06RoomId\x12\x1c\n" +
	"\tTimeStamp\x18\t \x01(\x03R\tTimeStamp\"\xb8\x01\n" +
	"\x1fMatchBattleAddStreamCoinMessage\x12,\n" +
	"\x11MatchBattleRoomId\x18\x01 \x01(\tR\x11MatchBattleRoomId\x125\n" +
	"\bUserList\x18\x02 \x03(\v2\x19.pmsg.AddWinnerStreamCoinR\bUserList\x12\x12\n" +
	"\x04Type\x18\x03 \x01(\tR\x04Type\x12\x1c\n" +
	"\tTimeStamp\x18\t \x01(\x03R\tTimeStamp\"\x91\x01\n" +
	"#MatchBattleStartGamedConfirmMessage\x12,\n" +
	"\x11MatchBattleRoomId\x18\x01 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x02 \x03(\tR\n" +
	"OpenIdList\x12\x1c\n" +
	"\tTimeStamp\x18\x03 \x01(\x03R\tTimeStamp\"\xab\x01\n" +
	"%MatchBattleStartGamedConfirAckMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x02 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x03 \x03(\tR\n" +
	"OpenIdList\x12\x1c\n" +
	"\tTimeStamp\x18\x04 \x01(\x03R\tTimeStamp\"\xa4\x01\n" +
	"\x1cMatchBattleV1StartAckMessage\x12,\n" +
	"\x11MatchBattleRoomId\x18\x01 \x01(\tR\x11MatchBattleRoomId\x12\x1e\n" +
	"\n" +
	"OpenIdList\x18\x02 \x03(\tR\n" +
	"OpenIdList\x12\x18\n" +
	"\aRoundId\x18\x03 \x01(\x03R\aRoundId\x12\x1c\n" +
	"\tTimeStamp\x18\x04 \x01(\x03R\tTimeStamp\"\xa1\x01\n" +
	"\x1fMatchBattleQuitWithErrorMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12,\n" +
	"\x11MatchBattleRoomId\x18\x02 \x01(\tR\x11MatchBattleRoomId\x12\x1a\n" +
	"\bErrorMsg\x18\x03 \x01(\tR\bErrorMsg\x12\x1c\n" +
	"\tTimeStamp\x18\x04 \x01(\x03R\tTimeStampB\bZ\x06./pmsgb\x06proto3"

var (
	file_proto_matchv1_proto_rawDescOnce sync.Once
	file_proto_matchv1_proto_rawDescData []byte
)

func file_proto_matchv1_proto_rawDescGZIP() []byte {
	file_proto_matchv1_proto_rawDescOnce.Do(func() {
		file_proto_matchv1_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_matchv1_proto_rawDesc), len(file_proto_matchv1_proto_rawDesc)))
	})
	return file_proto_matchv1_proto_rawDescData
}

var file_proto_matchv1_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_proto_matchv1_proto_goTypes = []any{
	(*MatchBattleV1ApplyMessage)(nil),                // 0: pmsg.MatchBattleV1ApplyMessage
	(*MatchBattleV1ApplyAckMessage)(nil),             // 1: pmsg.MatchBattleV1ApplyAckMessage
	(*MatchBattleV1ReadyMessage)(nil),                // 2: pmsg.MatchBattleV1ReadyMessage
	(*MatchBattleV1ReadyAckMessage)(nil),             // 3: pmsg.MatchBattleV1ReadyAckMessage
	(*MatchBattleV1TimeCheckMessage)(nil),            // 4: pmsg.MatchBattleV1TimeCheckMessage
	(*MatchBattleV1TimeCheckAckMessage)(nil),         // 5: pmsg.MatchBattleV1TimeCheckAckMessage
	(*MatchBattleV1StartConfirmMessage)(nil),         // 6: pmsg.MatchBattleV1StartConfirmMessage
	(*MatchBattleV1StartConfirmAckMessage)(nil),      // 7: pmsg.MatchBattleV1StartConfirmAckMessage
	(*MatchBattleV1SendRoundIdMessage)(nil),          // 8: pmsg.MatchBattleV1SendRoundIdMessage
	(*MatchBattleV1SendRoundIdAckMessage)(nil),       // 9: pmsg.MatchBattleV1SendRoundIdAckMessage
	(*MatchBattleV1AskRoundIdMessage)(nil),           // 10: pmsg.MatchBattleV1AskRoundIdMessage
	(*MatchBattleV1AskRoundIdAckMessage)(nil),        // 11: pmsg.MatchBattleV1AskRoundIdAckMessage
	(*MatchBattleV1StartMessage)(nil),                // 12: pmsg.MatchBattleV1StartMessage
	(*MatchBattleV1SyncMessage)(nil),                 // 13: pmsg.MatchBattleV1SyncMessage
	(*MatchBattleV1SyncAckMessage)(nil),              // 14: pmsg.MatchBattleV1SyncAckMessage
	(*MatchBattleV1EndMessage)(nil),                  // 15: pmsg.MatchBattleV1EndMessage
	(*MatchBattleV1CancelMessage)(nil),               // 16: pmsg.MatchBattleV1CancelMessage
	(*MatchBattleV1CancelAckMessage)(nil),            // 17: pmsg.MatchBattleV1CancelAckMessage
	(*MatchBattleV1ReconnectMessage)(nil),            // 18: pmsg.MatchBattleV1ReconnectMessage
	(*MatchBattleV1ReconnectAckMessage)(nil),         // 19: pmsg.MatchBattleV1ReconnectAckMessage
	(*MatchBattleV1ReconnectSyncMessage)(nil),        // 20: pmsg.MatchBattleV1ReconnectSyncMessage
	(*MatchBattleErrorMessage)(nil),                  // 21: pmsg.MatchBattleErrorMessage
	(*MatchBattleV1Upload)(nil),                      // 22: pmsg.MatchBattleV1Upload
	(*MatchBattleAddIntegralMessage)(nil),            // 23: pmsg.MatchBattleAddIntegralMessage
	(*MatchBattleUseWinnerStreamCoinMessage)(nil),    // 24: pmsg.MatchBattleUseWinnerStreamCoinMessage
	(*MatchBattleUseWinnerStreamCoinAckMessage)(nil), // 25: pmsg.MatchBattleUseWinnerStreamCoinAckMessage
	(*MatchBattleAddStreamCoinMessage)(nil),          // 26: pmsg.MatchBattleAddStreamCoinMessage
	(*MatchBattleStartGamedConfirmMessage)(nil),      // 27: pmsg.MatchBattleStartGamedConfirmMessage
	(*MatchBattleStartGamedConfirAckMessage)(nil),    // 28: pmsg.MatchBattleStartGamedConfirAckMessage
	(*MatchBattleV1StartAckMessage)(nil),             // 29: pmsg.MatchBattleV1StartAckMessage
	(*MatchBattleQuitWithErrorMessage)(nil),          // 30: pmsg.MatchBattleQuitWithErrorMessage
	(*MatchBattleV1ApplyAckMessageUserInfo)(nil),     // 31: pmsg.MatchBattleV1ApplyAckMessage.userInfo
	(*GroupResult)(nil),                              // 32: pmsg.GroupResult
	(*GroupUser)(nil),                                // 33: pmsg.GroupUser
	(*AddWinnerStreamCoin)(nil),                      // 34: pmsg.AddWinnerStreamCoin
}
var file_proto_matchv1_proto_depIdxs = []int32{
	31, // 0: pmsg.MatchBattleV1ApplyAckMessage.usersInfo:type_name -> pmsg.MatchBattleV1ApplyAckMessage.userInfo
	32, // 1: pmsg.MatchBattleV1Upload.GroupResultList:type_name -> pmsg.GroupResult
	33, // 2: pmsg.MatchBattleV1Upload.GroupUserList:type_name -> pmsg.GroupUser
	34, // 3: pmsg.MatchBattleAddStreamCoinMessage.UserList:type_name -> pmsg.AddWinnerStreamCoin
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_matchv1_proto_init() }
func file_proto_matchv1_proto_init() {
	if File_proto_matchv1_proto != nil {
		return
	}
	file_proto_groupresult_proto_init()
	file_proto_groupuser_proto_init()
	file_proto_addwinnerstreamcoin_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_matchv1_proto_rawDesc), len(file_proto_matchv1_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_matchv1_proto_goTypes,
		DependencyIndexes: file_proto_matchv1_proto_depIdxs,
		MessageInfos:      file_proto_matchv1_proto_msgTypes,
	}.Build()
	File_proto_matchv1_proto = out.File
	file_proto_matchv1_proto_goTypes = nil
	file_proto_matchv1_proto_depIdxs = nil
}
