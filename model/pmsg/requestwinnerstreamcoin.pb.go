// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/requestwinnerstreamcoin.proto

package pmsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 使用连胜币请求
type RequestwinnerstreamcoinMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenId        string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`        //用户ID
	UseNum        int64                  `protobuf:"varint,2,opt,name=UseNum,proto3" json:"UseNum,omitempty"`       //使用连胜币数量
	RoundId       int64                  `protobuf:"varint,3,opt,name=RoundId,proto3" json:"RoundId,omitempty"`     //对局ID
	GiftId        int64                  `protobuf:"varint,4,opt,name=GiftId,proto3" json:"GiftId,omitempty"`       //礼物ID
	TimeStamp     int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"` //时间戳
	RoomId        string                 `protobuf:"bytes,6,opt,name=RoomId,proto3" json:"RoomId,omitempty"`        //房间ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestwinnerstreamcoinMessage) Reset() {
	*x = RequestwinnerstreamcoinMessage{}
	mi := &file_proto_requestwinnerstreamcoin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestwinnerstreamcoinMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestwinnerstreamcoinMessage) ProtoMessage() {}

func (x *RequestwinnerstreamcoinMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_requestwinnerstreamcoin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestwinnerstreamcoinMessage.ProtoReflect.Descriptor instead.
func (*RequestwinnerstreamcoinMessage) Descriptor() ([]byte, []int) {
	return file_proto_requestwinnerstreamcoin_proto_rawDescGZIP(), []int{0}
}

func (x *RequestwinnerstreamcoinMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *RequestwinnerstreamcoinMessage) GetUseNum() int64 {
	if x != nil {
		return x.UseNum
	}
	return 0
}

func (x *RequestwinnerstreamcoinMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *RequestwinnerstreamcoinMessage) GetGiftId() int64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *RequestwinnerstreamcoinMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *RequestwinnerstreamcoinMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

// 使用连胜币返回
type ResponsewinnerstreamcoinMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OpenId            string                 `protobuf:"bytes,1,opt,name=OpenId,proto3" json:"OpenId,omitempty"`                        //用户ID
	WinningStreamCoin int64                  `protobuf:"varint,2,opt,name=WinningStreamCoin,proto3" json:"WinningStreamCoin,omitempty"` //现在连胜币数量
	RoundId           int64                  `protobuf:"varint,3,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                     //对局ID
	GiftId            int64                  `protobuf:"varint,4,opt,name=GiftId,proto3" json:"GiftId,omitempty"`                       //礼物ID
	TimeStamp         int64                  `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`                 //时间戳
	CanUse            bool                   `protobuf:"varint,6,opt,name=CanUse,proto3" json:"CanUse,omitempty"`                       //是否能够使用
	RoomId            string                 `protobuf:"bytes,7,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                        //房间ID
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ResponsewinnerstreamcoinMessage) Reset() {
	*x = ResponsewinnerstreamcoinMessage{}
	mi := &file_proto_requestwinnerstreamcoin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponsewinnerstreamcoinMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsewinnerstreamcoinMessage) ProtoMessage() {}

func (x *ResponsewinnerstreamcoinMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_requestwinnerstreamcoin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsewinnerstreamcoinMessage.ProtoReflect.Descriptor instead.
func (*ResponsewinnerstreamcoinMessage) Descriptor() ([]byte, []int) {
	return file_proto_requestwinnerstreamcoin_proto_rawDescGZIP(), []int{1}
}

func (x *ResponsewinnerstreamcoinMessage) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *ResponsewinnerstreamcoinMessage) GetWinningStreamCoin() int64 {
	if x != nil {
		return x.WinningStreamCoin
	}
	return 0
}

func (x *ResponsewinnerstreamcoinMessage) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *ResponsewinnerstreamcoinMessage) GetGiftId() int64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *ResponsewinnerstreamcoinMessage) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *ResponsewinnerstreamcoinMessage) GetCanUse() bool {
	if x != nil {
		return x.CanUse
	}
	return false
}

func (x *ResponsewinnerstreamcoinMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

var File_proto_requestwinnerstreamcoin_proto protoreflect.FileDescriptor

const file_proto_requestwinnerstreamcoin_proto_rawDesc = "" +
	"\n" +
	"#proto/requestwinnerstreamcoin.proto\x12\x04pmsg\"\xb8\x01\n" +
	"\x1eRequestwinnerstreamcoinMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12\x16\n" +
	"\x06UseNum\x18\x02 \x01(\x03R\x06UseNum\x12\x18\n" +
	"\aRoundId\x18\x03 \x01(\x03R\aRoundId\x12\x16\n" +
	"\x06GiftId\x18\x04 \x01(\x03R\x06GiftId\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\x12\x16\n" +
	"\x06RoomId\x18\x06 \x01(\tR\x06RoomId\"\xe7\x01\n" +
	"\x1fResponsewinnerstreamcoinMessage\x12\x16\n" +
	"\x06OpenId\x18\x01 \x01(\tR\x06OpenId\x12,\n" +
	"\x11WinningStreamCoin\x18\x02 \x01(\x03R\x11WinningStreamCoin\x12\x18\n" +
	"\aRoundId\x18\x03 \x01(\x03R\aRoundId\x12\x16\n" +
	"\x06GiftId\x18\x04 \x01(\x03R\x06GiftId\x12\x1c\n" +
	"\tTimeStamp\x18\x05 \x01(\x03R\tTimeStamp\x12\x16\n" +
	"\x06CanUse\x18\x06 \x01(\bR\x06CanUse\x12\x16\n" +
	"\x06RoomId\x18\a \x01(\tR\x06RoomIdB\bZ\x06./pmsgb\x06proto3"

var (
	file_proto_requestwinnerstreamcoin_proto_rawDescOnce sync.Once
	file_proto_requestwinnerstreamcoin_proto_rawDescData []byte
)

func file_proto_requestwinnerstreamcoin_proto_rawDescGZIP() []byte {
	file_proto_requestwinnerstreamcoin_proto_rawDescOnce.Do(func() {
		file_proto_requestwinnerstreamcoin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_requestwinnerstreamcoin_proto_rawDesc), len(file_proto_requestwinnerstreamcoin_proto_rawDesc)))
	})
	return file_proto_requestwinnerstreamcoin_proto_rawDescData
}

var file_proto_requestwinnerstreamcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_requestwinnerstreamcoin_proto_goTypes = []any{
	(*RequestwinnerstreamcoinMessage)(nil),  // 0: pmsg.RequestwinnerstreamcoinMessage
	(*ResponsewinnerstreamcoinMessage)(nil), // 1: pmsg.ResponsewinnerstreamcoinMessage
}
var file_proto_requestwinnerstreamcoin_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_requestwinnerstreamcoin_proto_init() }
func file_proto_requestwinnerstreamcoin_proto_init() {
	if File_proto_requestwinnerstreamcoin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_requestwinnerstreamcoin_proto_rawDesc), len(file_proto_requestwinnerstreamcoin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_requestwinnerstreamcoin_proto_goTypes,
		DependencyIndexes: file_proto_requestwinnerstreamcoin_proto_depIdxs,
		MessageInfos:      file_proto_requestwinnerstreamcoin_proto_msgTypes,
	}.Build()
	File_proto_requestwinnerstreamcoin_proto = out.File
	file_proto_requestwinnerstreamcoin_proto_goTypes = nil
	file_proto_requestwinnerstreamcoin_proto_depIdxs = nil
}
