// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/constid.proto

package pmsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageId int32

const (
	MessageId_Unknown MessageId = 0
	// 0-50 为系统保留消息
	MessageId_NodeInfo    MessageId = 1 // 网关信息发送，发送给node节点
	MessageId_NodeInfoAck MessageId = 2 // node收到网关信息返回，也可能不需要
	MessageId_NodeLoad    MessageId = 3 // node传输load信息给gateway
	// 50之后为正常消息
	MessageId_UidGet     MessageId = 4  // 分配uid
	MessageId_TestMsg    MessageId = 5  // 发送测试消息
	MessageId_TestMsgAck MessageId = 6  // 测试消息返回
	MessageId_Login      MessageId = 10 // 登录消息
	MessageId_LoginAck   MessageId = 11 // 登录返回消息
	MessageId_ReLogin    MessageId = 12 // 重新登录
	MessageId_ReLoginAck MessageId = 13 // 重新登录返回
	MessageId_Logout     MessageId = 14 // 退出登录
	MessageId_LogoutAck  MessageId = 15 // 退出登录返回
	// pk---------------------------------------------------
	MessageId_PkDataSend     MessageId = 20 // pk数据发送
	MessageId_PkDataRecv     MessageId = 21 // pk数据接收
	MessageId_PkDataSendAck  MessageId = 22 // pk数据发送返回
	MessageId_PkDataRecvAck  MessageId = 23 // pk数据接收返回
	MessageId_PkDataError    MessageId = 24 // pk数据错误
	MessageId_PkDataErrorAck MessageId = 25 // pk数据错误返回
	// pk---------------------------------------------------
	MessageId_MatchBattleQuitWithError          MessageId = 43  // 因网络原因退出匹配组
	MessageId_MatchBattleStartGamedConfirm      MessageId = 45  // 游戏开始前确认
	MessageId_MatchBattleStartGamedConfirmAck   MessageId = 46  // 游戏开始前确认ack
	MessageId_MatchBattleV1StartAck             MessageId = 47  // 匹配开始返回信息
	MessageId_MatchBattleAddStreamCoin          MessageId = 48  // pk增加连胜币
	MessageId_MatchBattleUseWinnerStreamCoin    MessageId = 49  // 匹配使用连胜币
	MessageId_MatchBattleUseWinnerStreamCoinAck MessageId = 50  // 使用连胜币返回
	MessageId_MatchBattleAddIntegral            MessageId = 51  //客户端上传积分
	MessageId_MatchBattleV1RoundUpload          MessageId = 52  // 匹配最后数据上传
	MessageId_MatchBattleV1SendUserInfo         MessageId = 53  // 匹配1v1发送用户信息
	MessageId_MatchBattleV1AskUserInfo          MessageId = 54  // 匹配1v1查询用户信息
	MessageId_MatchBattleV1AskUserInfoAck       MessageId = 55  // 匹配1v1查询用户信息返回
	MessageId_MatchBattleV1Apply                MessageId = 56  // 匹配1v1
	MessageId_MatchBattleV1ApplyAck             MessageId = 57  // 匹配1v1返回
	MessageId_MatchBattleV1Ready                MessageId = 58  // 匹配1v1准备
	MessageId_MatchBattleV1ReadyAck             MessageId = 59  // 匹配1v1准备返回
	MessageId_MatchBattleV1Cancel               MessageId = 60  // 取消匹配
	MessageId_MatchBattleV1CancelAck            MessageId = 61  // 取消匹配返回
	MessageId_MatchBattleV1TimeCheck            MessageId = 62  // 匹配1v1开始时间
	MessageId_MatchBattleV1TimeCheckAck         MessageId = 63  // 匹配1v1开始返回，
	MessageId_MatchBattleV1StartConfirm         MessageId = 64  // 匹配1v1开始确认
	MessageId_MatchBattleV1StartConfirmAck      MessageId = 65  // 匹配1v1开始确认返回
	MessageId_MatchBattleV1Sync                 MessageId = 66  // 匹配1v1同步
	MessageId_MatchBattleV1SyncAck              MessageId = 67  // 匹配1v1同步返回
	MessageId_MatchBattleV1Reconnect            MessageId = 68  // 匹配1v1重连
	MessageId_MatchBattleV1ReconnectAck         MessageId = 69  // 匹配1v1重连返回
	MessageId_MatchBattleV1End                  MessageId = 70  // 匹配1v1结束
	MessageId_MatchBattleV1EndAck               MessageId = 71  // 匹配1v1结束返回
	MessageId_MatchBattleV1ReconnectSync        MessageId = 72  // 匹配1v1重连同步
	MessageId_MatchBattleV1ReconnectSyncAck     MessageId = 73  // 匹配1v1重连同步返回
	MessageId_MatchBattleV1SendRoundId          MessageId = 74  // 匹配1v1发送轮次ID
	MessageId_MatchBattleV1AskRoundId           MessageId = 75  // 匹配1v1发送轮次ID
	MessageId_MatchBattleV1AskRoundIdAck        MessageId = 76  // 匹配1v1发送轮次ID返回
	MessageId_MatchBattleError                  MessageId = 77  // 匹配报错
	MessageId_MatchBattleV1Start                MessageId = 78  // 匹配开始
	MessageId_MatchBattleV1SendRoundIdAck       MessageId = 79  // 匹配1v1发送轮次ID
	MessageId_Token                             MessageId = 80  // token 消息
	MessageId_TokenAck                          MessageId = 81  // token 消息返回
	MessageId_SyncGameStart                     MessageId = 82  // 同步游戏状态开始
	MessageId_SyncGameStartAck                  MessageId = 83  // 同步游戏状态开始返回
	MessageId_SyncGameEnd                       MessageId = 84  // 同步游戏状态结束
	MessageId_SyncGameEndAck                    MessageId = 85  // 同步游戏状态结束返回
	MessageId_RoundDataUpLoad                   MessageId = 86  // 上传消息至抖音云
	MessageId_RoundDataUpLoadAck                MessageId = 87  // 上传消息返回
	MessageId_GetVersionTopHundred              MessageId = 88  // 获取当前排行榜前一百名百名
	MessageId_GetVersionTopHundredAck           MessageId = 89  // 获取当前排行榜前一百名返回
	MessageId_GetMonthTopHundred                MessageId = 90  // 获取当前月排行榜前一百名
	MessageId_GetMonthTopHundredAck             MessageId = 91  // 获取当前月排行榜前一百名返回
	MessageId_UseWinnerStreamCoin               MessageId = 92  // 使用连胜币
	MessageId_UseWinnerStreamCoinAck            MessageId = 93  // 使用连胜币返回
	MessageId_UserAddWinnerStreamCoin           MessageId = 94  // 添加连胜币
	MessageId_UserAddWinnerStreamCoinAck        MessageId = 95  // 添加连胜币返回
	MessageId_QueryWinnerStreamCoin             MessageId = 96  // 查询连胜币
	MessageId_QueryWinnerStreamCoinAck          MessageId = 97  // 查询连胜币返回
	MessageId_IsFirstComsume                    MessageId = 98  // 是否是第一次消费
	MessageId_IsFirstComsumeAck                 MessageId = 99  // 消费返回
	MessageId_SingleRoomAddGroup                MessageId = 100 // 单个直播间加入分组
	MessageId_SingleRoomAddGroupAck             MessageId = 101 // 单个直播间加入分组返回
	MessageId_SingleUserAddGroup                MessageId = 102 // 单个用户加入分组
	MessageId_SingleUserAddGroupAck             MessageId = 103 // 单个用户加入分组返回
	MessageId_LevelQuery                        MessageId = 104 // 等级查询
	MessageId_LevelQueryAck                     MessageId = 105 // 等级查询返回
	MessageId_LiveComment                       MessageId = 108 // 直播间弹幕消息
	MessageId_liveGift                          MessageId = 109 // 直播间礼物消息
	MessageId_liveLike                          MessageId = 110 // 直播间点赞消息
	MessageId_liveFollow                        MessageId = 111 // 直播间关注消息
	MessageId_StartBind                         MessageId = 112 // 开始绑定
	MessageId_StartBindAck                      MessageId = 113 // 开始绑定返回
	MessageId_StopBind                          MessageId = 114 // 结束绑定
	MessageId_StopBindAck                       MessageId = 115 // 结束绑定返回
	MessageId_MsgAckSend                        MessageId = 116 //  客户端消息Ack验证发送
	MessageId_MsgAckSendAck                     MessageId = 117 //  客户端消息Ack验证发送
	MessageId_BackErrorSend                     MessageId = 118 // 后端发送错误信息
	MessageId_FrontErrorSend                    MessageId = 119 // 前端发送错误信息
	MessageId_AddIntegral                       MessageId = 120 // 增加积分
	MessageId_Lottery                           MessageId = 121 // 抽奖
	MessageId_DisConnect                        MessageId = 125 // 断联协议
	MessageId_Forward                           MessageId = 126 // 126 为client转发消息
	MessageId_ForwardAck                        MessageId = 127 // 127 为node转发回应消息
)

// Enum value maps for MessageId.
var (
	MessageId_name = map[int32]string{
		0:   "Unknown",
		1:   "NodeInfo",
		2:   "NodeInfoAck",
		3:   "NodeLoad",
		4:   "UidGet",
		5:   "TestMsg",
		6:   "TestMsgAck",
		10:  "Login",
		11:  "LoginAck",
		12:  "ReLogin",
		13:  "ReLoginAck",
		14:  "Logout",
		15:  "LogoutAck",
		20:  "PkDataSend",
		21:  "PkDataRecv",
		22:  "PkDataSendAck",
		23:  "PkDataRecvAck",
		24:  "PkDataError",
		25:  "PkDataErrorAck",
		43:  "MatchBattleQuitWithError",
		45:  "MatchBattleStartGamedConfirm",
		46:  "MatchBattleStartGamedConfirmAck",
		47:  "MatchBattleV1StartAck",
		48:  "MatchBattleAddStreamCoin",
		49:  "MatchBattleUseWinnerStreamCoin",
		50:  "MatchBattleUseWinnerStreamCoinAck",
		51:  "MatchBattleAddIntegral",
		52:  "MatchBattleV1RoundUpload",
		53:  "MatchBattleV1SendUserInfo",
		54:  "MatchBattleV1AskUserInfo",
		55:  "MatchBattleV1AskUserInfoAck",
		56:  "MatchBattleV1Apply",
		57:  "MatchBattleV1ApplyAck",
		58:  "MatchBattleV1Ready",
		59:  "MatchBattleV1ReadyAck",
		60:  "MatchBattleV1Cancel",
		61:  "MatchBattleV1CancelAck",
		62:  "MatchBattleV1TimeCheck",
		63:  "MatchBattleV1TimeCheckAck",
		64:  "MatchBattleV1StartConfirm",
		65:  "MatchBattleV1StartConfirmAck",
		66:  "MatchBattleV1Sync",
		67:  "MatchBattleV1SyncAck",
		68:  "MatchBattleV1Reconnect",
		69:  "MatchBattleV1ReconnectAck",
		70:  "MatchBattleV1End",
		71:  "MatchBattleV1EndAck",
		72:  "MatchBattleV1ReconnectSync",
		73:  "MatchBattleV1ReconnectSyncAck",
		74:  "MatchBattleV1SendRoundId",
		75:  "MatchBattleV1AskRoundId",
		76:  "MatchBattleV1AskRoundIdAck",
		77:  "MatchBattleError",
		78:  "MatchBattleV1Start",
		79:  "MatchBattleV1SendRoundIdAck",
		80:  "Token",
		81:  "TokenAck",
		82:  "SyncGameStart",
		83:  "SyncGameStartAck",
		84:  "SyncGameEnd",
		85:  "SyncGameEndAck",
		86:  "RoundDataUpLoad",
		87:  "RoundDataUpLoadAck",
		88:  "GetVersionTopHundred",
		89:  "GetVersionTopHundredAck",
		90:  "GetMonthTopHundred",
		91:  "GetMonthTopHundredAck",
		92:  "UseWinnerStreamCoin",
		93:  "UseWinnerStreamCoinAck",
		94:  "UserAddWinnerStreamCoin",
		95:  "UserAddWinnerStreamCoinAck",
		96:  "QueryWinnerStreamCoin",
		97:  "QueryWinnerStreamCoinAck",
		98:  "IsFirstComsume",
		99:  "IsFirstComsumeAck",
		100: "SingleRoomAddGroup",
		101: "SingleRoomAddGroupAck",
		102: "SingleUserAddGroup",
		103: "SingleUserAddGroupAck",
		104: "LevelQuery",
		105: "LevelQueryAck",
		108: "LiveComment",
		109: "liveGift",
		110: "liveLike",
		111: "liveFollow",
		112: "StartBind",
		113: "StartBindAck",
		114: "StopBind",
		115: "StopBindAck",
		116: "MsgAckSend",
		117: "MsgAckSendAck",
		118: "BackErrorSend",
		119: "FrontErrorSend",
		120: "AddIntegral",
		121: "Lottery",
		125: "DisConnect",
		126: "Forward",
		127: "ForwardAck",
	}
	MessageId_value = map[string]int32{
		"Unknown":                           0,
		"NodeInfo":                          1,
		"NodeInfoAck":                       2,
		"NodeLoad":                          3,
		"UidGet":                            4,
		"TestMsg":                           5,
		"TestMsgAck":                        6,
		"Login":                             10,
		"LoginAck":                          11,
		"ReLogin":                           12,
		"ReLoginAck":                        13,
		"Logout":                            14,
		"LogoutAck":                         15,
		"PkDataSend":                        20,
		"PkDataRecv":                        21,
		"PkDataSendAck":                     22,
		"PkDataRecvAck":                     23,
		"PkDataError":                       24,
		"PkDataErrorAck":                    25,
		"MatchBattleQuitWithError":          43,
		"MatchBattleStartGamedConfirm":      45,
		"MatchBattleStartGamedConfirmAck":   46,
		"MatchBattleV1StartAck":             47,
		"MatchBattleAddStreamCoin":          48,
		"MatchBattleUseWinnerStreamCoin":    49,
		"MatchBattleUseWinnerStreamCoinAck": 50,
		"MatchBattleAddIntegral":            51,
		"MatchBattleV1RoundUpload":          52,
		"MatchBattleV1SendUserInfo":         53,
		"MatchBattleV1AskUserInfo":          54,
		"MatchBattleV1AskUserInfoAck":       55,
		"MatchBattleV1Apply":                56,
		"MatchBattleV1ApplyAck":             57,
		"MatchBattleV1Ready":                58,
		"MatchBattleV1ReadyAck":             59,
		"MatchBattleV1Cancel":               60,
		"MatchBattleV1CancelAck":            61,
		"MatchBattleV1TimeCheck":            62,
		"MatchBattleV1TimeCheckAck":         63,
		"MatchBattleV1StartConfirm":         64,
		"MatchBattleV1StartConfirmAck":      65,
		"MatchBattleV1Sync":                 66,
		"MatchBattleV1SyncAck":              67,
		"MatchBattleV1Reconnect":            68,
		"MatchBattleV1ReconnectAck":         69,
		"MatchBattleV1End":                  70,
		"MatchBattleV1EndAck":               71,
		"MatchBattleV1ReconnectSync":        72,
		"MatchBattleV1ReconnectSyncAck":     73,
		"MatchBattleV1SendRoundId":          74,
		"MatchBattleV1AskRoundId":           75,
		"MatchBattleV1AskRoundIdAck":        76,
		"MatchBattleError":                  77,
		"MatchBattleV1Start":                78,
		"MatchBattleV1SendRoundIdAck":       79,
		"Token":                             80,
		"TokenAck":                          81,
		"SyncGameStart":                     82,
		"SyncGameStartAck":                  83,
		"SyncGameEnd":                       84,
		"SyncGameEndAck":                    85,
		"RoundDataUpLoad":                   86,
		"RoundDataUpLoadAck":                87,
		"GetVersionTopHundred":              88,
		"GetVersionTopHundredAck":           89,
		"GetMonthTopHundred":                90,
		"GetMonthTopHundredAck":             91,
		"UseWinnerStreamCoin":               92,
		"UseWinnerStreamCoinAck":            93,
		"UserAddWinnerStreamCoin":           94,
		"UserAddWinnerStreamCoinAck":        95,
		"QueryWinnerStreamCoin":             96,
		"QueryWinnerStreamCoinAck":          97,
		"IsFirstComsume":                    98,
		"IsFirstComsumeAck":                 99,
		"SingleRoomAddGroup":                100,
		"SingleRoomAddGroupAck":             101,
		"SingleUserAddGroup":                102,
		"SingleUserAddGroupAck":             103,
		"LevelQuery":                        104,
		"LevelQueryAck":                     105,
		"LiveComment":                       108,
		"liveGift":                          109,
		"liveLike":                          110,
		"liveFollow":                        111,
		"StartBind":                         112,
		"StartBindAck":                      113,
		"StopBind":                          114,
		"StopBindAck":                       115,
		"MsgAckSend":                        116,
		"MsgAckSendAck":                     117,
		"BackErrorSend":                     118,
		"FrontErrorSend":                    119,
		"AddIntegral":                       120,
		"Lottery":                           121,
		"DisConnect":                        125,
		"Forward":                           126,
		"ForwardAck":                        127,
	}
)

func (x MessageId) Enum() *MessageId {
	p := new(MessageId)
	*p = x
	return p
}

func (x MessageId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageId) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_constid_proto_enumTypes[0].Descriptor()
}

func (MessageId) Type() protoreflect.EnumType {
	return &file_proto_constid_proto_enumTypes[0]
}

func (x MessageId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageId.Descriptor instead.
func (MessageId) EnumDescriptor() ([]byte, []int) {
	return file_proto_constid_proto_rawDescGZIP(), []int{0}
}

var File_proto_constid_proto protoreflect.FileDescriptor

const file_proto_constid_proto_rawDesc = "" +
	"\n" +
	"\x13proto/constid.proto\x12\x04pmsg*\xb9\x11\n" +
	"\tMessageId\x12\v\n" +
	"\aUnknown\x10\x00\x12\f\n" +
	"\bNodeInfo\x10\x01\x12\x0f\n" +
	"\vNodeInfoAck\x10\x02\x12\f\n" +
	"\bNodeLoad\x10\x03\x12\n" +
	"\n" +
	"\x06UidGet\x10\x04\x12\v\n" +
	"\aTestMsg\x10\x05\x12\x0e\n" +
	"\n" +
	"TestMsgAck\x10\x06\x12\t\n" +
	"\x05Login\x10\n" +
	"\x12\f\n" +
	"\bLoginAck\x10\v\x12\v\n" +
	"\aReLogin\x10\f\x12\x0e\n" +
	"\n" +
	"ReLoginAck\x10\r\x12\n" +
	"\n" +
	"\x06Logout\x10\x0e\x12\r\n" +
	"\tLogoutAck\x10\x0f\x12\x0e\n" +
	"\n" +
	"PkDataSend\x10\x14\x12\x0e\n" +
	"\n" +
	"PkDataRecv\x10\x15\x12\x11\n" +
	"\rPkDataSendAck\x10\x16\x12\x11\n" +
	"\rPkDataRecvAck\x10\x17\x12\x0f\n" +
	"\vPkDataError\x10\x18\x12\x12\n" +
	"\x0ePkDataErrorAck\x10\x19\x12\x1c\n" +
	"\x18MatchBattleQuitWithError\x10+\x12 \n" +
	"\x1cMatchBattleStartGamedConfirm\x10-\x12#\n" +
	"\x1fMatchBattleStartGamedConfirmAck\x10.\x12\x19\n" +
	"\x15MatchBattleV1StartAck\x10/\x12\x1c\n" +
	"\x18MatchBattleAddStreamCoin\x100\x12\"\n" +
	"\x1eMatchBattleUseWinnerStreamCoin\x101\x12%\n" +
	"!MatchBattleUseWinnerStreamCoinAck\x102\x12\x1a\n" +
	"\x16MatchBattleAddIntegral\x103\x12\x1c\n" +
	"\x18MatchBattleV1RoundUpload\x104\x12\x1d\n" +
	"\x19MatchBattleV1SendUserInfo\x105\x12\x1c\n" +
	"\x18MatchBattleV1AskUserInfo\x106\x12\x1f\n" +
	"\x1bMatchBattleV1AskUserInfoAck\x107\x12\x16\n" +
	"\x12MatchBattleV1Apply\x108\x12\x19\n" +
	"\x15MatchBattleV1ApplyAck\x109\x12\x16\n" +
	"\x12MatchBattleV1Ready\x10:\x12\x19\n" +
	"\x15MatchBattleV1ReadyAck\x10;\x12\x17\n" +
	"\x13MatchBattleV1Cancel\x10<\x12\x1a\n" +
	"\x16MatchBattleV1CancelAck\x10=\x12\x1a\n" +
	"\x16MatchBattleV1TimeCheck\x10>\x12\x1d\n" +
	"\x19MatchBattleV1TimeCheckAck\x10?\x12\x1d\n" +
	"\x19MatchBattleV1StartConfirm\x10@\x12 \n" +
	"\x1cMatchBattleV1StartConfirmAck\x10A\x12\x15\n" +
	"\x11MatchBattleV1Sync\x10B\x12\x18\n" +
	"\x14MatchBattleV1SyncAck\x10C\x12\x1a\n" +
	"\x16MatchBattleV1Reconnect\x10D\x12\x1d\n" +
	"\x19MatchBattleV1ReconnectAck\x10E\x12\x14\n" +
	"\x10MatchBattleV1End\x10F\x12\x17\n" +
	"\x13MatchBattleV1EndAck\x10G\x12\x1e\n" +
	"\x1aMatchBattleV1ReconnectSync\x10H\x12!\n" +
	"\x1dMatchBattleV1ReconnectSyncAck\x10I\x12\x1c\n" +
	"\x18MatchBattleV1SendRoundId\x10J\x12\x1b\n" +
	"\x17MatchBattleV1AskRoundId\x10K\x12\x1e\n" +
	"\x1aMatchBattleV1AskRoundIdAck\x10L\x12\x14\n" +
	"\x10MatchBattleError\x10M\x12\x16\n" +
	"\x12MatchBattleV1Start\x10N\x12\x1f\n" +
	"\x1bMatchBattleV1SendRoundIdAck\x10O\x12\t\n" +
	"\x05Token\x10P\x12\f\n" +
	"\bTokenAck\x10Q\x12\x11\n" +
	"\rSyncGameStart\x10R\x12\x14\n" +
	"\x10SyncGameStartAck\x10S\x12\x0f\n" +
	"\vSyncGameEnd\x10T\x12\x12\n" +
	"\x0eSyncGameEndAck\x10U\x12\x13\n" +
	"\x0fRoundDataUpLoad\x10V\x12\x16\n" +
	"\x12RoundDataUpLoadAck\x10W\x12\x18\n" +
	"\x14GetVersionTopHundred\x10X\x12\x1b\n" +
	"\x17GetVersionTopHundredAck\x10Y\x12\x16\n" +
	"\x12GetMonthTopHundred\x10Z\x12\x19\n" +
	"\x15GetMonthTopHundredAck\x10[\x12\x17\n" +
	"\x13UseWinnerStreamCoin\x10\\\x12\x1a\n" +
	"\x16UseWinnerStreamCoinAck\x10]\x12\x1b\n" +
	"\x17UserAddWinnerStreamCoin\x10^\x12\x1e\n" +
	"\x1aUserAddWinnerStreamCoinAck\x10_\x12\x19\n" +
	"\x15QueryWinnerStreamCoin\x10`\x12\x1c\n" +
	"\x18QueryWinnerStreamCoinAck\x10a\x12\x12\n" +
	"\x0eIsFirstComsume\x10b\x12\x15\n" +
	"\x11IsFirstComsumeAck\x10c\x12\x16\n" +
	"\x12SingleRoomAddGroup\x10d\x12\x19\n" +
	"\x15SingleRoomAddGroupAck\x10e\x12\x16\n" +
	"\x12SingleUserAddGroup\x10f\x12\x19\n" +
	"\x15SingleUserAddGroupAck\x10g\x12\x0e\n" +
	"\n" +
	"LevelQuery\x10h\x12\x11\n" +
	"\rLevelQueryAck\x10i\x12\x0f\n" +
	"\vLiveComment\x10l\x12\f\n" +
	"\bliveGift\x10m\x12\f\n" +
	"\bliveLike\x10n\x12\x0e\n" +
	"\n" +
	"liveFollow\x10o\x12\r\n" +
	"\tStartBind\x10p\x12\x10\n" +
	"\fStartBindAck\x10q\x12\f\n" +
	"\bStopBind\x10r\x12\x0f\n" +
	"\vStopBindAck\x10s\x12\x0e\n" +
	"\n" +
	"MsgAckSend\x10t\x12\x11\n" +
	"\rMsgAckSendAck\x10u\x12\x11\n" +
	"\rBackErrorSend\x10v\x12\x12\n" +
	"\x0eFrontErrorSend\x10w\x12\x0f\n" +
	"\vAddIntegral\x10x\x12\v\n" +
	"\aLottery\x10y\x12\x0e\n" +
	"\n" +
	"DisConnect\x10}\x12\v\n" +
	"\aForward\x10~\x12\x0e\n" +
	"\n" +
	"ForwardAck\x10\x7fB\bZ\x06./pmsgb\x06proto3"

var (
	file_proto_constid_proto_rawDescOnce sync.Once
	file_proto_constid_proto_rawDescData []byte
)

func file_proto_constid_proto_rawDescGZIP() []byte {
	file_proto_constid_proto_rawDescOnce.Do(func() {
		file_proto_constid_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_constid_proto_rawDesc), len(file_proto_constid_proto_rawDesc)))
	})
	return file_proto_constid_proto_rawDescData
}

var file_proto_constid_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_constid_proto_goTypes = []any{
	(MessageId)(0), // 0: pmsg.MessageId
}
var file_proto_constid_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_constid_proto_init() }
func file_proto_constid_proto_init() {
	if File_proto_constid_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_constid_proto_rawDesc), len(file_proto_constid_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_constid_proto_goTypes,
		DependencyIndexes: file_proto_constid_proto_depIdxs,
		EnumInfos:         file_proto_constid_proto_enumTypes,
	}.Build()
	File_proto_constid_proto = out.File
	file_proto_constid_proto_goTypes = nil
	file_proto_constid_proto_depIdxs = nil
}
