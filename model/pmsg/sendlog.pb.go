// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/sendlog.proto

package pmsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SendLogInfoMessage 发送日志信息
type SendLogInfoMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AnchorOpenId  string                 `protobuf:"bytes,1,opt,name=anchor_open_id,json=anchorOpenId,proto3" json:"anchor_open_id,omitempty"` // 主播openid
	LogLabel      string                 `protobuf:"bytes,2,opt,name=log_label,json=logLabel,proto3" json:"log_label,omitempty"`               // 日志标签, 例如: "pk", "match", "game", "error" 等 + 时间戳，例如: "pk_20230801120000"
	LogId         int64                  `protobuf:"varint,3,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`                       // 日志id
	LogContent    []byte                 `protobuf:"bytes,4,opt,name=log_content,json=logContent,proto3" json:"log_content,omitempty"`         // 日志内容 // 建议控制在1024k以下，即1MB以下，建议512k以下
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendLogInfoMessage) Reset() {
	*x = SendLogInfoMessage{}
	mi := &file_proto_sendlog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendLogInfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogInfoMessage) ProtoMessage() {}

func (x *SendLogInfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sendlog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogInfoMessage.ProtoReflect.Descriptor instead.
func (*SendLogInfoMessage) Descriptor() ([]byte, []int) {
	return file_proto_sendlog_proto_rawDescGZIP(), []int{0}
}

func (x *SendLogInfoMessage) GetAnchorOpenId() string {
	if x != nil {
		return x.AnchorOpenId
	}
	return ""
}

func (x *SendLogInfoMessage) GetLogLabel() string {
	if x != nil {
		return x.LogLabel
	}
	return ""
}

func (x *SendLogInfoMessage) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *SendLogInfoMessage) GetLogContent() []byte {
	if x != nil {
		return x.LogContent
	}
	return nil
}

// SendLogInfoAckMessage 发送日志信息返回
type SendLogInfoAckMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AnchorOpenId  string                 `protobuf:"bytes,1,opt,name=anchor_open_id,json=anchorOpenId,proto3" json:"anchor_open_id,omitempty"` // 主播openid
	LogLabel      string                 `protobuf:"bytes,2,opt,name=log_label,json=logLabel,proto3" json:"log_label,omitempty"`               // 日志标签, 例如: "pk", "match", "game", "error" 等 + 时间戳，例如: "pk_20230801120000"
	LogId         int64                  `protobuf:"varint,3,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`                       // 日志id
	Code          int32                  `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`                                      // 错误码
	Msg           string                 `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`                                         // 错误信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendLogInfoAckMessage) Reset() {
	*x = SendLogInfoAckMessage{}
	mi := &file_proto_sendlog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendLogInfoAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogInfoAckMessage) ProtoMessage() {}

func (x *SendLogInfoAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sendlog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogInfoAckMessage.ProtoReflect.Descriptor instead.
func (*SendLogInfoAckMessage) Descriptor() ([]byte, []int) {
	return file_proto_sendlog_proto_rawDescGZIP(), []int{1}
}

func (x *SendLogInfoAckMessage) GetAnchorOpenId() string {
	if x != nil {
		return x.AnchorOpenId
	}
	return ""
}

func (x *SendLogInfoAckMessage) GetLogLabel() string {
	if x != nil {
		return x.LogLabel
	}
	return ""
}

func (x *SendLogInfoAckMessage) GetLogId() int64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *SendLogInfoAckMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SendLogInfoAckMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_proto_sendlog_proto protoreflect.FileDescriptor

const file_proto_sendlog_proto_rawDesc = "" +
	"\n" +
	"\x13proto/sendlog.proto\x12\x04pmsg\"\x8f\x01\n" +
	"\x12SendLogInfoMessage\x12$\n" +
	"\x0eanchor_open_id\x18\x01 \x01(\tR\fanchorOpenId\x12\x1b\n" +
	"\tlog_label\x18\x02 \x01(\tR\blogLabel\x12\x15\n" +
	"\x06log_id\x18\x03 \x01(\x03R\x05logId\x12\x1f\n" +
	"\vlog_content\x18\x04 \x01(\fR\n" +
	"logContent\"\x97\x01\n" +
	"\x15SendLogInfoAckMessage\x12$\n" +
	"\x0eanchor_open_id\x18\x01 \x01(\tR\fanchorOpenId\x12\x1b\n" +
	"\tlog_label\x18\x02 \x01(\tR\blogLabel\x12\x15\n" +
	"\x06log_id\x18\x03 \x01(\x03R\x05logId\x12\x12\n" +
	"\x04code\x18\x04 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x05 \x01(\tR\x03msgB\bZ\x06./pmsgb\x06proto3"

var (
	file_proto_sendlog_proto_rawDescOnce sync.Once
	file_proto_sendlog_proto_rawDescData []byte
)

func file_proto_sendlog_proto_rawDescGZIP() []byte {
	file_proto_sendlog_proto_rawDescOnce.Do(func() {
		file_proto_sendlog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_sendlog_proto_rawDesc), len(file_proto_sendlog_proto_rawDesc)))
	})
	return file_proto_sendlog_proto_rawDescData
}

var file_proto_sendlog_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_sendlog_proto_goTypes = []any{
	(*SendLogInfoMessage)(nil),    // 0: pmsg.SendLogInfoMessage
	(*SendLogInfoAckMessage)(nil), // 1: pmsg.SendLogInfoAckMessage
}
var file_proto_sendlog_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_sendlog_proto_init() }
func file_proto_sendlog_proto_init() {
	if File_proto_sendlog_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_sendlog_proto_rawDesc), len(file_proto_sendlog_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_sendlog_proto_goTypes,
		DependencyIndexes: file_proto_sendlog_proto_depIdxs,
		MessageInfos:      file_proto_sendlog_proto_msgTypes,
	}.Build()
	File_proto_sendlog_proto = out.File
	file_proto_sendlog_proto_goTypes = nil
	file_proto_sendlog_proto_depIdxs = nil
}
