syntax = "proto3";
package pmsg;
option go_package="./pmsg";

//protoc.exe   --go_out=./ .\messagetype\*.proto

enum MessageId {
    Unknown = 0;
    //  0-50 为系统保留消息
    NodeInfo = 1;// 网关信息发送，发送给node节点
    NodeInfoAck = 2; // node收到网关信息返回，也可能不需要
    NodeLoad = 3;   // node传输load信息给gateway
    //  50之后为正常消息
    UidGet = 4;    // 分配uid
    TestMsg = 5;   // 发送测试消息
    TestMsgAck = 6;    // 测试消息返回
    Login = 10; // 登录消息
    LoginAck = 11;  // 登录返回消息
    ReLogin = 12;   // 重新登录
    ReLoginAck = 13;    // 重新登录返回
    Logout = 14;    // 退出登录
    LogoutAck = 15; // 退出登录返回
    //pk---------------------------------------------------
    PkDataSend = 20; // pk数据发送
    PkDataRecv = 21; // pk数据接收
    PkDataSendAck = 22; // pk数据发送返回
    PkDataRecvAck = 23; // pk数据接收返回
    PkDataError = 24; // pk数据错误
    PkDataErrorAck = 25; // pk数据错误返回
    //pk---------------------------------------------------
    MatchBattleQuitWithError = 43; // 因网络原因退出匹配组
    MatchBattleStartGamedConfirm = 45; // 游戏开始前确认
    MatchBattleStartGamedConfirmAck = 46; // 游戏开始前确认ack
    MatchBattleV1StartAck = 47;   // 匹配开始返回信息
    MatchBattleAddStreamCoin = 48;  // pk增加连胜币
    MatchBattleUseWinnerStreamCoin = 49; // 匹配使用连胜币
    MatchBattleUseWinnerStreamCoinAck = 50; // 使用连胜币返回
    MatchBattleAddIntegral = 51;    //客户端上传积分
    MatchBattleV1RoundUpload = 52;  // 匹配最后数据上传
    MatchBattleV1SendUserInfo = 53;  // 匹配1v1发送用户信息
    MatchBattleV1AskUserInfo = 54; // 匹配1v1查询用户信息
    MatchBattleV1AskUserInfoAck = 55;  // 匹配1v1查询用户信息返回
    MatchBattleV1Apply = 56;   // 匹配1v1
    MatchBattleV1ApplyAck = 57;    // 匹配1v1返回
    MatchBattleV1Ready = 58;  // 匹配1v1准备
    MatchBattleV1ReadyAck = 59;   // 匹配1v1准备返回
    MatchBattleV1Cancel = 60;  // 取消匹配
    MatchBattleV1CancelAck = 61;   // 取消匹配返回
    MatchBattleV1TimeCheck = 62;  // 匹配1v1开始时间
    MatchBattleV1TimeCheckAck = 63;   // 匹配1v1开始返回，
    MatchBattleV1StartConfirm = 64; // 匹配1v1开始确认
    MatchBattleV1StartConfirmAck = 65;  // 匹配1v1开始确认返回
    MatchBattleV1Sync = 66;  // 匹配1v1同步
    MatchBattleV1SyncAck = 67;   // 匹配1v1同步返回
    MatchBattleV1Reconnect = 68;   // 匹配1v1重连
    MatchBattleV1ReconnectAck = 69;    // 匹配1v1重连返回
    MatchBattleV1End = 70;  // 匹配1v1结束
    MatchBattleV1EndAck = 71;   // 匹配1v1结束返回
    MatchBattleV1ReconnectSync = 72;   // 匹配1v1重连同步
    MatchBattleV1ReconnectSyncAck = 73;    // 匹配1v1重连同步返回
    MatchBattleV1SendRoundId = 74;  // 匹配1v1发送轮次ID
    MatchBattleV1AskRoundId = 75;  // 匹配1v1发送轮次ID
    MatchBattleV1AskRoundIdAck = 76;   // 匹配1v1发送轮次ID返回
    MatchBattleError = 77;   // 匹配报错
    MatchBattleV1Start = 78;   // 匹配开始
    MatchBattleV1SendRoundIdAck = 79;  // 匹配1v1发送轮次ID
    Token = 80; // token 消息
    TokenAck = 81;  // token 消息返回 
    SyncGameStart = 82; // 同步游戏状态开始
    SyncGameStartAck = 83;  // 同步游戏状态开始返回
    SyncGameEnd = 84;   // 同步游戏状态结束
    SyncGameEndAck = 85;    // 同步游戏状态结束返回
    RoundDataUpLoad = 86;   // 上传消息至抖音云
    RoundDataUpLoadAck = 87;    // 上传消息返回
    GetVersionTopHundred = 88; // 获取当前排行榜前一百名百名
    GetVersionTopHundredAck = 89;   // 获取当前排行榜前一百名返回
    GetMonthTopHundred = 90;    // 获取当前月排行榜前一百名
    GetMonthTopHundredAck = 91; // 获取当前月排行榜前一百名返回
    UseWinnerStreamCoin = 92;   // 使用连胜币
    UseWinnerStreamCoinAck = 93;    // 使用连胜币返回
    UserAddWinnerStreamCoin = 94;   // 添加连胜币
    UserAddWinnerStreamCoinAck = 95;    // 添加连胜币返回
    QueryWinnerStreamCoin = 96; // 查询连胜币
    QueryWinnerStreamCoinAck = 97;  // 查询连胜币返回
    IsFirstComsume = 98; // 是否是第一次消费
    IsFirstComsumeAck = 99;  // 消费返回
    SingleRoomAddGroup = 100;   // 单个直播间加入分组
    SingleRoomAddGroupAck = 101;    // 单个直播间加入分组返回
    SingleUserAddGroup = 102; // 单个用户加入分组
    SingleUserAddGroupAck = 103;  // 单个用户加入分组返回
    LevelQuery = 104; // 等级查询
    LevelQueryAck = 105;  // 等级查询返回
    SetSideCharacterQuery = 106; // 设置侧边角色查询
    SetSideCharacterQueryAck = 107;  // 设置侧边角色查询返回
    LiveComment = 108;   // 直播间弹幕消息
    liveGift = 109; // 直播间礼物消息
    liveLike = 110; // 直播间点赞消息
    liveFollow = 111;   // 直播间关注消息
    StartBind = 112;   // 开始绑定
    StartBindAck = 113;    // 开始绑定返回
    StopBind = 114; // 结束绑定
    StopBindAck = 115;  // 结束绑定返回
    MsgAckSend = 116;   //  客户端消息Ack验证发送
    MsgAckSendAck = 117;   //  客户端消息Ack验证发送
    BackErrorSend = 118; // 后端发送错误信息
    FrontErrorSend = 119; // 前端发送错误信息
    AddIntegral = 120;  // 增加积分
    Lottery = 121;  // 抽奖
    FrontSendMessageError = 122; // 前端发送消息错误
    DisConnect = 125;   // 断联协议
    Forward = 126;  // 126 为client转发消息
    ForwardAck = 127;   // 127 为node转发回应消息
}
